{"version":3,"file":"alpha.esm.js","sources":["../src/translation/TranslationMessages.ts","../src/translation/TranslationResource.ts","../src/translation/TranslationRef.ts","../src/apis/definitions/TranslationApi.ts","../src/apis/definitions/AppLanguageApi.ts","../src/translation/useTranslationRef.ts","../../frontend-plugin-api/src/routing/describeParentCallSite.ts","../../frontend-plugin-api/src/routing/RouteRef.ts","../../frontend-plugin-api/src/routing/SubRouteRef.ts","../../frontend-plugin-api/src/routing/ExternalRouteRef.ts","../src/routing/convertLegacyRouteRef.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationRef } from '@backstage/core-plugin-api/alpha';\n\n/**\n * Represents a collection of messages to be provided for a given translation ref.\n *\n * @alpha\n * @remarks\n *\n * This collection of messages can either be used directly as an override for the\n * default messages, or it can be used to provide translations for a language by\n * by being referenced by a {@link TranslationResource}.\n */\nexport interface TranslationMessages<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n  TFull extends boolean = boolean,\n> {\n  $$type: '@backstage/TranslationMessages';\n  /** The ID of the translation ref that these messages are for */\n  id: TId;\n  /** Whether or not these messages override all known messages */\n  full: TFull;\n  /** The messages provided for the given translation ref */\n  messages: TMessages;\n}\n\n/**\n * Options for {@link createTranslationMessages}.\n *\n * @alpha\n */\nexport interface TranslationMessagesOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TFull extends boolean,\n> {\n  ref: TranslationRef<TId, TMessages>;\n\n  full?: TFull;\n\n  messages: false extends TFull\n    ? { [key in keyof TMessages]?: string | null }\n    : { [key in keyof TMessages]: string | null };\n}\n\n/**\n * Creates a collection of messages for a given translation ref.\n *\n * @alpha\n */\nexport function createTranslationMessages<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TFull extends boolean,\n>(\n  options: TranslationMessagesOptions<TId, TMessages, TFull>,\n): TranslationMessages<TId, TMessages, TFull> {\n  return {\n    $$type: '@backstage/TranslationMessages',\n    id: options.ref.id,\n    full: Boolean(options.full) as TFull,\n    messages: options.messages as TMessages,\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TranslationMessages,\n  TranslationRef,\n} from '@backstage/core-plugin-api/alpha';\n\n/** @alpha */\nexport interface TranslationResource<TId extends string = string> {\n  $$type: '@backstage/TranslationResource';\n  id: TId;\n}\n\n/** @internal */\nexport type InternalTranslationResourceLoader = () => Promise<{\n  messages: { [key in string]: string | null };\n}>;\n\n/** @internal */\nexport interface InternalTranslationResource<TId extends string = string>\n  extends TranslationResource<TId> {\n  version: 'v1';\n  resources: Array<{\n    language: string;\n    loader: InternalTranslationResourceLoader;\n  }>;\n}\n\n/** @internal */\nexport function toInternalTranslationResource<TId extends string>(\n  resource: TranslationResource<TId>,\n): InternalTranslationResource<TId> {\n  const r = resource as InternalTranslationResource<TId>;\n  if (r.$$type !== '@backstage/TranslationResource') {\n    throw new Error(`Invalid translation resource, bad type '${r.$$type}'`);\n  }\n  if (r.version !== 'v1') {\n    throw new Error(`Invalid translation resource, bad version '${r.version}'`);\n  }\n\n  return r;\n}\n\n/** @alpha */\nexport interface TranslationResourceOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default:\n        | TranslationMessages<TId>\n        | { [key in keyof TMessages]: string | null };\n    }>;\n  },\n> {\n  ref: TranslationRef<TId, TMessages>;\n\n  translations: TTranslations;\n}\n\n/** @alpha */\nexport function createTranslationResource<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default:\n        | TranslationMessages<TId>\n        | { [key in keyof TMessages]: string | null };\n    }>;\n  },\n>(\n  options: TranslationResourceOptions<TId, TMessages, TTranslations>,\n): TranslationResource<TId> {\n  return {\n    $$type: '@backstage/TranslationResource',\n    version: 'v1',\n    id: options.ref.id,\n    resources: Object.entries(options.translations).map(\n      ([language, loader]) => ({\n        language,\n        loader: () =>\n          loader().then(m => {\n            const value = m.default;\n            return {\n              messages:\n                value?.$$type === '@backstage/TranslationMessages'\n                  ? value.messages\n                  : value,\n            };\n          }),\n      }),\n    ),\n  } as InternalTranslationResource<TId>;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTranslationResource,\n  TranslationResource,\n} from './TranslationResource';\n\n/** @alpha */\nexport interface TranslationRef<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n> {\n  $$type: '@backstage/TranslationRef';\n\n  id: TId;\n\n  T: TMessages;\n}\n\n/** @internal */\ntype AnyMessages = { [key in string]: string };\n\n/** @internal */\nexport interface InternalTranslationRef<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n> extends TranslationRef<TId, TMessages> {\n  version: 'v1';\n\n  getDefaultMessages(): AnyMessages;\n\n  getDefaultResource(): TranslationResource | undefined;\n}\n\n/** @alpha */\nexport interface TranslationRefOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default: { [key in keyof TMessages]: string | null };\n    }>;\n  },\n> {\n  id: TId;\n  messages: TMessages;\n  translations?: TTranslations;\n}\n\n/** @internal */\nclass TranslationRefImpl<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n> implements InternalTranslationRef<TId, TMessages>\n{\n  #id: TId;\n  #messages: TMessages;\n  #resources: TranslationResource | undefined;\n\n  constructor(options: TranslationRefOptions<TId, TMessages, any>) {\n    this.#id = options.id;\n    this.#messages = options.messages;\n  }\n\n  $$type = '@backstage/TranslationRef' as const;\n\n  version = 'v1' as const;\n\n  get id(): TId {\n    return this.#id;\n  }\n\n  get T(): never {\n    throw new Error('Not implemented');\n  }\n\n  getDefaultMessages(): AnyMessages {\n    return this.#messages;\n  }\n\n  setDefaultResource(resources: TranslationResource): void {\n    this.#resources = resources;\n  }\n\n  getDefaultResource(): TranslationResource | undefined {\n    return this.#resources;\n  }\n\n  toString() {\n    return `TranslationRef{id=${this.id}}`;\n  }\n}\n\n/** @alpha */\nexport function createTranslationRef<\n  TId extends string,\n  const TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default: { [key in keyof TMessages]: string | null };\n    }>;\n  },\n>(\n  config: TranslationRefOptions<TId, TMessages, TTranslations>,\n): TranslationRef<TId, TMessages> {\n  const ref = new TranslationRefImpl(config);\n  if (config.translations) {\n    ref.setDefaultResource(\n      createTranslationResource({\n        ref,\n        translations: config.translations as any,\n      }),\n    );\n  }\n  return ref;\n}\n\n/** @internal */\nexport function toInternalTranslationRef<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n>(ref: TranslationRef<TId, TMessages>): InternalTranslationRef<TId, TMessages> {\n  const r = ref as InternalTranslationRef<TId, TMessages>;\n  if (r.$$type !== '@backstage/TranslationRef') {\n    throw new Error(`Invalid translation ref, bad type '${r.$$type}'`);\n  }\n  if (r.version !== 'v1') {\n    throw new Error(`Invalid translation ref, bad version '${r.version}'`);\n  }\n  return r;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\nimport { Observable } from '@backstage/types';\nimport { TranslationRef } from '../../translation';\n\n/**\n * Base translation options.\n *\n * @alpha\n */\ninterface BaseOptions {\n  interpolation?: {\n    /** Whether to HTML escape provided values, defaults to false  */\n    escapeValue?: boolean;\n  };\n}\n\n/**\n * All pluralization suffixes supported by i18next\n *\n * @ignore\n */\ntype TranslationPlural = 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n\n/**\n * A mapping of i18n formatting types to their corresponding types and options.\n * @ignore\n */\ntype I18nextFormatMap = {\n  number: {\n    type: number;\n    options: Intl.NumberFormatOptions;\n  };\n  currency: {\n    type: number;\n    options: Intl.NumberFormatOptions;\n  };\n  datetime: {\n    type: Date;\n    options: Intl.DateTimeFormatOptions;\n  };\n  relativetime: {\n    type: number;\n    options: {\n      range?: Intl.RelativeTimeFormatUnit;\n    } & Intl.RelativeTimeFormatOptions;\n  };\n  list: {\n    type: string[];\n    options: Intl.ListFormatOptions;\n  };\n};\n\n/**\n * Extracts all pluralized keys from the message map.\n *\n * @example\n * ```\n * { foo: 'foo', bar_one: 'bar', bar_other: 'bars' } -> 'bar'\n * ```\n *\n * @ignore\n */\ntype PluralKeys<TMessages extends { [key in string]: string }> = {\n  [Key in keyof TMessages]: Key extends `${infer K}_${TranslationPlural}`\n    ? K\n    : never;\n}[keyof TMessages];\n\n/**\n * Collapses a message map into normalized keys with union values.\n *\n * @example\n * ```\n * { foo_one: 'foo', foo_other: 'foos' } -> { foo: 'foo' | 'foos' }\n * ```\n *\n * @ignore\n */\ntype CollapsedMessages<TMessages extends { [key in string]: string }> = {\n  [key in keyof TMessages as key extends `${infer K}_${TranslationPlural}`\n    ? K\n    : key]: TMessages[key];\n};\n\n/**\n * Helper type that expands type hints\n *\n * @ignore\n */\ntype Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;\n\n/**\n * Helper type that expands type hints recursively\n *\n * @ignore\n */\ntype ExpandRecursive<T> = T extends infer O\n  ? { [K in keyof O]: ExpandRecursive<O[K]> }\n  : never;\n\n/**\n * Trim away whitespace\n *\n * @ignore\n */\ntype Trim<T> = T extends ` ${infer U}`\n  ? Trim<U>\n  : T extends `${infer U} `\n  ? Trim<U>\n  : T;\n\n/**\n * Extracts the key and format from a replacement string.\n *\n * @example\n * ```\n * 'foo, number' -> { foo: number }, 'foo' -> { foo: undefined }\n * ```\n */\ntype ExtractFormat<Replacement extends string> =\n  Replacement extends `${infer Key},${infer FullFormat}`\n    ? {\n        [key in Trim<Key>]: Lowercase<\n          Trim<\n            FullFormat extends `${infer Format}(${string})${string}`\n              ? Format\n              : FullFormat\n          >\n        >;\n      }\n    : { [key in Trim<Replacement>]: undefined };\n\n/**\n * Expand the keys in a flat map to nested objects.\n *\n * @example\n * ```\n * { 'a.b': 'foo', 'a.c': 'bar' } -> { a: { b: 'foo', c: 'bar' }\n * ```\n *\n * @ignore\n */\ntype ExpandKeys<TMap extends {}> = {\n  [Key in keyof TMap as Key extends `${infer Prefix}.${string}`\n    ? Prefix\n    : Key]: Key extends `${string}.${infer Rest}`\n    ? ExpandKeys<{ [key in Rest]: TMap[Key] }>\n    : TMap[Key];\n};\n\n/**\n * Extracts all option keys and their format from a message string.\n *\n * @example\n * ```\n * 'foo {{bar}} {{baz, number}}' -> { 'bar': undefined, 'baz': 'number' }\n * ```\n *\n * @ignore\n */\ntype ReplaceFormatsFromMessage<TMessage> =\n  TMessage extends `${string}{{${infer Replacement}}}${infer Tail}` // no formatting, e.g. {{foo}}\n    ? ExpandKeys<ExtractFormat<Replacement>> & ReplaceFormatsFromMessage<Tail>\n    : {};\n\n/**\n * Generates the replace options structure\n *\n * @ignore\n */\ntype ReplaceOptionsFromFormats<TFormats extends {}> = {\n  [Key in keyof TFormats]: TFormats[Key] extends keyof I18nextFormatMap\n    ? I18nextFormatMap[TFormats[Key]]['type']\n    : TFormats[Key] extends {}\n    ? Expand<ReplaceOptionsFromFormats<TFormats[Key]>>\n    : string;\n};\n\n/**\n * Generates the formatParams options structure\n *\n * @ignore\n */\ntype ReplaceFormatParamsFromFormats<TFormats extends {}> = {\n  [Key in keyof TFormats]?: TFormats[Key] extends keyof I18nextFormatMap\n    ? I18nextFormatMap[TFormats[Key]]['options']\n    : TFormats[Key] extends {}\n    ? Expand<ReplaceFormatParamsFromFormats<TFormats[Key]>>\n    : undefined;\n};\n\n/**\n * Extracts all nesting keys from a message string.\n *\n * @example\n * ```\n * 'foo $t(bar) $t(baz)' -> 'bar' | 'baz'\n * ```\n *\n * @ignore\n */\ntype NestingKeysFromMessage<TMessage extends string> =\n  TMessage extends `${string}$t(${infer Key})${infer Tail}` // nesting options are not supported\n    ? Trim<Key> | NestingKeysFromMessage<Tail>\n    : never;\n\n/**\n * Find all referenced keys, given a starting key and the full set of messages.\n *\n * This will only discover keys up to 3 levels deep.\n *\n * @example\n * ```\n * <'x', { x: '$t(y) $t(z)', y: 'y', z: '$t(w)', w: 'w', foo: 'foo' }> -> 'x' | 'y' | 'z' | 'w'\n * ```\n *\n * @ignore\n */\ntype NestedMessageKeys<\n  TKey extends keyof TMessages,\n  TMessages extends { [key in string]: string },\n> =\n  | TKey\n  | NestedMessageKeys2<NestingKeysFromMessage<TMessages[TKey]>, TMessages>;\n// Can't recursively reference ourself, so instead we got this beauty\ntype NestedMessageKeys2<\n  TKey extends keyof TMessages,\n  TMessages extends { [key in string]: string },\n> =\n  | TKey\n  | NestedMessageKeys3<NestingKeysFromMessage<TMessages[TKey]>, TMessages>;\n// Only support 3 levels of nesting\ntype NestedMessageKeys3<\n  TKey extends keyof TMessages,\n  TMessages extends { [key in string]: string },\n> = TKey | NestingKeysFromMessage<TMessages[TKey]>;\n\n/**\n * Converts a union type to an intersection type.\n *\n * @example\n * ```\n * { foo: 'foo' } | { bar: 'bar' } -> { foo: 'foo' } & { bar: 'bar' }\n * ```\n *\n * @ignore\n */\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (\n  k: infer I,\n) => void\n  ? I\n  : never;\n\n/**\n * Collects different types of options into a single object\n *\n * @ignore\n */\ntype CollectOptions<\n  TCount extends { count?: number },\n  TFormats extends {},\n> = TCount &\n  // count is special, omit it from the replacements\n  (keyof Omit<TFormats, 'count'> extends never\n    ? {}\n    : (\n        | Expand<Omit<ReplaceOptionsFromFormats<TFormats>, 'count'>>\n        | {\n            replace: Expand<Omit<ReplaceOptionsFromFormats<TFormats>, 'count'>>;\n          }\n      ) & {\n        formatParams?: Expand<ReplaceFormatParamsFromFormats<TFormats>>;\n      });\n\n/**\n * Helper type to only require options argument if needed\n *\n * @ignore\n */\ntype OptionArgs<TOptions extends {}> = keyof TOptions extends never\n  ? [options?: BaseOptions]\n  : [options: BaseOptions & TOptions];\n\n/**\n * @ignore\n */\ntype TranslationFunctionOptions<\n  TKeys extends keyof TMessages, // All normalized message keys to be considered, i.e. included nested ones\n  TPluralKeys extends keyof TMessages, // All keys in the message map that are pluralized\n  TMessages extends { [key in string]: string }, // Collapsed message map with normalized keys and union values\n> = OptionArgs<\n  Expand<\n    CollectOptions<\n      TKeys & TPluralKeys extends never ? {} : { count: number },\n      ExpandRecursive<\n        UnionToIntersection<ReplaceFormatsFromMessage<TMessages[TKeys]>>\n      >\n    >\n  >\n>;\n\n/** @alpha */\nexport interface TranslationFunction<\n  TMessages extends { [key in string]: string },\n> {\n  <TKey extends keyof CollapsedMessages<TMessages>>(\n    key: TKey,\n    ...[args]: TranslationFunctionOptions<\n      NestedMessageKeys<TKey, CollapsedMessages<TMessages>>,\n      PluralKeys<TMessages>,\n      CollapsedMessages<TMessages>\n    >\n  ): CollapsedMessages<TMessages>[TKey];\n}\n\n/** @alpha */\nexport type TranslationSnapshot<TMessages extends { [key in string]: string }> =\n  { ready: false } | { ready: true; t: TranslationFunction<TMessages> };\n\n/** @alpha */\nexport type TranslationApi = {\n  getTranslation<TMessages extends { [key in string]: string }>(\n    translationRef: TranslationRef<string, TMessages>,\n  ): TranslationSnapshot<TMessages>;\n\n  translation$<TMessages extends { [key in string]: string }>(\n    translationRef: TranslationRef<string, TMessages>,\n  ): Observable<TranslationSnapshot<TMessages>>;\n};\n\n/**\n * @alpha\n */\nexport const translationApiRef: ApiRef<TranslationApi> = createApiRef({\n  id: 'core.translation',\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\nimport { Observable } from '@backstage/types';\n\n/** @alpha */\nexport type AppLanguageApi = {\n  getAvailableLanguages(): { languages: string[] };\n\n  setLanguage(language?: string): void;\n\n  getLanguage(): { language: string };\n\n  language$(): Observable<{ language: string }>;\n};\n\n/**\n * @alpha\n */\nexport const appLanguageApiRef: ApiRef<AppLanguageApi> = createApiRef({\n  id: 'core.applanguage',\n});\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { errorApiRef, useApi } from '../apis';\nimport {\n  translationApiRef,\n  TranslationFunction,\n  TranslationSnapshot,\n} from '../apis/alpha';\nimport { TranslationRef } from './TranslationRef';\n\n// Make sure we don't fill the logs with loading errors for the same ref\nconst loggedRefs = new WeakSet<TranslationRef<string, {}>>();\n\n/** @alpha */\nexport const useTranslationRef = <\n  TMessages extends { [key in string]: string },\n>(\n  translationRef: TranslationRef<string, TMessages>,\n): { t: TranslationFunction<TMessages> } => {\n  const errorApi = useApi(errorApiRef);\n  const translationApi = useApi(translationApiRef);\n\n  const [snapshot, setSnapshot] = useState<TranslationSnapshot<TMessages>>(() =>\n    translationApi.getTranslation(translationRef),\n  );\n  const observable = useMemo(\n    () => translationApi.translation$(translationRef),\n    [translationApi, translationRef],\n  );\n\n  const onError = useCallback(\n    (error: Error) => {\n      if (!loggedRefs.has(translationRef)) {\n        const errMsg = `Failed to load translation resource '${translationRef.id}'; caused by ${error}`;\n        // eslint-disable-next-line no-console\n        console.error(errMsg);\n        errorApi.post(new Error(errMsg));\n        loggedRefs.add(translationRef);\n      }\n    },\n    [errorApi, translationRef],\n  );\n\n  useEffect(() => {\n    const subscription = observable.subscribe({\n      next(next) {\n        if (next.ready) {\n          setSnapshot(next);\n        }\n      },\n      error(error) {\n        onError(error);\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable, onError]);\n\n  // Keep track of if the provided translation ref changes, and in that case update the snapshot\n  const initialRenderRef = useRef(true);\n  useEffect(() => {\n    if (initialRenderRef.current) {\n      initialRenderRef.current = false;\n    } else {\n      setSnapshot(translationApi.getTranslation(translationRef));\n    }\n  }, [translationApi, translationRef]);\n\n  if (!snapshot.ready) {\n    throw new Promise<void>(resolve => {\n      const subscription = observable.subscribe({\n        next(next) {\n          if (next.ready) {\n            subscription.unsubscribe();\n            resolve();\n          }\n        },\n        error(error) {\n          subscription.unsubscribe();\n          onError(error);\n          resolve();\n        },\n      });\n    });\n  }\n\n  return { t: snapshot.t };\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst MESSAGE_MARKER = 'eHgtF5hmbrXyiEvo';\n\n/**\n * Internal helper that describes the location of the parent caller.\n * @internal\n */\nexport function describeParentCallSite(\n  ErrorConstructor: { new (message: string): Error } = Error,\n): string {\n  const { stack } = new ErrorConstructor(MESSAGE_MARKER);\n  if (!stack) {\n    return '<unknown>';\n  }\n\n  // Safari and Firefox don't include the error itself in the stack\n  const startIndex = stack.includes(MESSAGE_MARKER)\n    ? stack.indexOf('\\n') + 1\n    : 0;\n  const secondEntryStart =\n    stack.indexOf('\\n', stack.indexOf('\\n', startIndex) + 1) + 1;\n  const secondEntryEnd = stack.indexOf('\\n', secondEntryStart);\n\n  const line = stack.substring(secondEntryStart, secondEntryEnd).trim();\n  if (!line) {\n    return 'unknown';\n  }\n\n  // Below we try to extract the location for different browsers.\n  // Since RouteRefs are declared at the top-level of modules the caller name isn't interesting.\n\n  // Chrome\n  if (line.includes('(')) {\n    return line.substring(line.indexOf('(') + 1, line.indexOf(')'));\n  }\n\n  // Safari & Firefox\n  if (line.includes('@')) {\n    return line.substring(line.indexOf('@') + 1);\n  }\n\n  // Give up\n  return line;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { describeParentCallSite } from './describeParentCallSite';\nimport { AnyRouteRefParams } from './types';\n\n/**\n * Absolute route reference.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport interface RouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> {\n  readonly $$type: '@backstage/RouteRef';\n  readonly T: TParams;\n}\n\n/** @internal */\nexport interface InternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> extends RouteRef<TParams> {\n  readonly version: 'v1';\n  getParams(): string[];\n  getDescription(): string;\n\n  setId(id: string): void;\n}\n\n/** @internal */\nexport function toInternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n>(resource: RouteRef<TParams>): InternalRouteRef<TParams> {\n  const r = resource as InternalRouteRef<TParams>;\n  if (r.$$type !== '@backstage/RouteRef') {\n    throw new Error(`Invalid RouteRef, bad type '${r.$$type}'`);\n  }\n\n  return r;\n}\n\n/** @internal */\nexport function isRouteRef(opaque: { $$type: string }): opaque is RouteRef {\n  return opaque.$$type === '@backstage/RouteRef';\n}\n\n/** @internal */\nexport class RouteRefImpl implements InternalRouteRef {\n  readonly $$type = '@backstage/RouteRef';\n  readonly version = 'v1';\n  declare readonly T: never;\n\n  #id?: string;\n  #params: string[];\n  #creationSite: string;\n\n  constructor(readonly params: string[] = [], creationSite: string) {\n    this.#params = params;\n    this.#creationSite = creationSite;\n  }\n\n  getParams(): string[] {\n    return this.#params;\n  }\n\n  getDescription(): string {\n    if (this.#id) {\n      return this.#id;\n    }\n    return `created at '${this.#creationSite}'`;\n  }\n\n  get #name() {\n    return this.$$type.slice('@backstage/'.length);\n  }\n\n  setId(id: string): void {\n    if (!id) {\n      throw new Error(`${this.#name} id must be a non-empty string`);\n    }\n    if (this.#id) {\n      throw new Error(\n        `${this.#name} was referenced twice as both '${this.#id}' and '${id}'`,\n      );\n    }\n    this.#id = id;\n  }\n\n  toString(): string {\n    return `${this.#name}{${this.getDescription()}}`;\n  }\n}\n\n/**\n * Create a {@link RouteRef} from a route descriptor.\n *\n * @param config - Description of the route reference to be created.\n * @public\n */\nexport function createRouteRef<\n  // Params is the type that we care about and the one to be embedded in the route ref.\n  // For example, given the params ['name', 'kind'], Params will be {name: string, kind: string}\n  TParams extends { [param in TParamKeys]: string } | undefined = undefined,\n  TParamKeys extends string = string,\n>(config?: {\n  /** A list of parameter names that the path that this route ref is bound to must contain */\n  readonly params: string extends TParamKeys ? (keyof TParams)[] : TParamKeys[];\n}): RouteRef<\n  keyof TParams extends never\n    ? undefined\n    : string extends TParamKeys\n    ? TParams\n    : { [param in TParamKeys]: string }\n> {\n  return new RouteRefImpl(\n    config?.params as string[] | undefined,\n    describeParentCallSite(),\n  ) as RouteRef<any>;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RouteRef, toInternalRouteRef } from './RouteRef';\nimport { AnyRouteRefParams } from './types';\n\n// Should match the pattern in react-router\nconst PARAM_PATTERN = /^\\w+$/;\n\n/**\n * Descriptor of a route relative to an absolute {@link RouteRef}.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport interface SubRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> {\n  readonly $$type: '@backstage/SubRouteRef';\n\n  readonly T: TParams;\n\n  readonly path: string;\n}\n\n/** @internal */\nexport interface InternalSubRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> extends SubRouteRef<TParams> {\n  readonly version: 'v1';\n\n  getParams(): string[];\n  getParent(): RouteRef;\n  getDescription(): string;\n}\n\n/** @internal */\nexport function toInternalSubRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n>(resource: SubRouteRef<TParams>): InternalSubRouteRef<TParams> {\n  const r = resource as InternalSubRouteRef<TParams>;\n  if (r.$$type !== '@backstage/SubRouteRef') {\n    throw new Error(`Invalid SubRouteRef, bad type '${r.$$type}'`);\n  }\n\n  return r;\n}\n\n/** @internal */\nexport function isSubRouteRef(opaque: {\n  $$type: string;\n}): opaque is SubRouteRef {\n  return opaque.$$type === '@backstage/SubRouteRef';\n}\n\n/** @internal */\nexport class SubRouteRefImpl<TParams extends AnyRouteRefParams>\n  implements SubRouteRef<TParams>\n{\n  readonly $$type = '@backstage/SubRouteRef';\n  readonly version = 'v1';\n  declare readonly T: never;\n\n  #params: string[];\n  #parent: RouteRef;\n\n  constructor(readonly path: string, params: string[], parent: RouteRef) {\n    this.#params = params;\n    this.#parent = parent;\n  }\n\n  getParams(): string[] {\n    return this.#params;\n  }\n\n  getParent(): RouteRef {\n    return this.#parent;\n  }\n\n  getDescription(): string {\n    const parent = toInternalRouteRef(this.#parent);\n    return `at ${this.path} with parent ${parent.getDescription()}`;\n  }\n\n  toString(): string {\n    return `SubRouteRef{${this.getDescription()}}`;\n  }\n}\n\n/**\n * Used in {@link PathParams} type declaration.\n * @ignore\n */\ntype ParamPart<S extends string> = S extends `:${infer Param}` ? Param : never;\n\n/**\n * Used in {@link PathParams} type declaration.\n * @ignore\n */\ntype ParamNames<S extends string> = S extends `${infer Part}/${infer Rest}`\n  ? ParamPart<Part> | ParamNames<Rest>\n  : ParamPart<S>;\n/**\n * This utility type helps us infer a Param object type from a string path\n * For example, `/foo/:bar/:baz` inferred to `{ bar: string, baz: string }`\n * @ignore\n */\ntype PathParams<S extends string> = { [name in ParamNames<S>]: string };\n\n/**\n * Merges a param object type with an optional params type into a params object.\n * @ignore\n */\ntype MergeParams<\n  P1 extends { [param in string]: string },\n  P2 extends AnyRouteRefParams,\n> = (P1[keyof P1] extends never ? {} : P1) & (P2 extends undefined ? {} : P2);\n\n/**\n * Convert empty params to undefined.\n * @ignore\n */\ntype TrimEmptyParams<Params extends { [param in string]: string }> =\n  keyof Params extends never ? undefined : Params;\n\n/**\n * Creates a SubRouteRef type given the desired parameters and parent route parameters.\n * The parameters types are merged together while ensuring that there is no overlap between the two.\n *\n * @ignore\n */\ntype MakeSubRouteRef<\n  Params extends { [param in string]: string },\n  ParentParams extends AnyRouteRefParams,\n> = keyof Params & keyof ParentParams extends never\n  ? SubRouteRef<TrimEmptyParams<MergeParams<Params, ParentParams>>>\n  : never;\n\n/**\n * Create a {@link SubRouteRef} from a route descriptor.\n *\n * @param config - Description of the route reference to be created.\n * @public\n */\nexport function createSubRouteRef<\n  Path extends string,\n  ParentParams extends AnyRouteRefParams = never,\n>(config: {\n  path: Path;\n  parent: RouteRef<ParentParams>;\n}): MakeSubRouteRef<PathParams<Path>, ParentParams> {\n  const { path, parent } = config;\n  type Params = PathParams<Path>;\n\n  const internalParent = toInternalRouteRef(parent);\n  const parentParams = internalParent.getParams();\n\n  // Collect runtime parameters from the path, e.g. ['bar', 'baz'] from '/foo/:bar/:baz'\n  const pathParams = path\n    .split('/')\n    .filter(p => p.startsWith(':'))\n    .map(p => p.substring(1));\n  const params = [...parentParams, ...pathParams];\n\n  if (parentParams.some(p => pathParams.includes(p as string))) {\n    throw new Error(\n      'SubRouteRef may not have params that overlap with its parent',\n    );\n  }\n  if (!path.startsWith('/')) {\n    throw new Error(`SubRouteRef path must start with '/', got '${path}'`);\n  }\n  if (path.endsWith('/')) {\n    throw new Error(`SubRouteRef path must not end with '/', got '${path}'`);\n  }\n  for (const param of pathParams) {\n    if (!PARAM_PATTERN.test(param)) {\n      throw new Error(`SubRouteRef path has invalid param, got '${param}'`);\n    }\n  }\n\n  // We ensure that the type of the return type is sane here\n  const subRouteRef = new SubRouteRefImpl(\n    path,\n    params as string[],\n    parent,\n  ) as SubRouteRef<TrimEmptyParams<MergeParams<Params, ParentParams>>>;\n\n  // But skip type checking of the return value itself, because the conditional\n  // type checking of the parent parameter overlap is tricky to express.\n  return subRouteRef as any;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RouteRefImpl } from './RouteRef';\nimport { describeParentCallSite } from './describeParentCallSite';\nimport { AnyRouteRefParams } from './types';\n\n/**\n * Route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport interface ExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n  TOptional extends boolean = boolean,\n> {\n  readonly $$type: '@backstage/ExternalRouteRef';\n  readonly T: TParams;\n  readonly optional: TOptional;\n}\n\n/** @internal */\nexport interface InternalExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n  TOptional extends boolean = boolean,\n> extends ExternalRouteRef<TParams, TOptional> {\n  readonly version: 'v1';\n  getParams(): string[];\n  getDescription(): string;\n\n  setId(id: string): void;\n}\n\n/** @internal */\nexport function toInternalExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n  TOptional extends boolean = boolean,\n>(\n  resource: ExternalRouteRef<TParams, TOptional>,\n): InternalExternalRouteRef<TParams, TOptional> {\n  const r = resource as InternalExternalRouteRef<TParams, TOptional>;\n  if (r.$$type !== '@backstage/ExternalRouteRef') {\n    throw new Error(`Invalid ExternalRouteRef, bad type '${r.$$type}'`);\n  }\n\n  return r;\n}\n\n/** @internal */\nexport function isExternalRouteRef(opaque: {\n  $$type: string;\n}): opaque is ExternalRouteRef {\n  return opaque.$$type === '@backstage/ExternalRouteRef';\n}\n\n/** @internal */\nclass ExternalRouteRefImpl\n  extends RouteRefImpl\n  implements InternalExternalRouteRef\n{\n  readonly $$type = '@backstage/ExternalRouteRef' as any;\n\n  constructor(\n    readonly optional: boolean,\n    readonly params: string[] = [],\n    creationSite: string,\n  ) {\n    super(params, creationSite);\n  }\n}\n\n/**\n * Creates a route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @param options - Description of the route reference to be created.\n * @public\n */\nexport function createExternalRouteRef<\n  TParams extends { [param in TParamKeys]: string } | undefined = undefined,\n  TOptional extends boolean = false,\n  TParamKeys extends string = string,\n>(options?: {\n  /**\n   * The parameters that will be provided to the external route reference.\n   */\n  readonly params?: string extends TParamKeys\n    ? (keyof TParams)[]\n    : TParamKeys[];\n\n  /**\n   * Whether or not this route is optional, defaults to false.\n   *\n   * Optional external routes are not required to be bound in the app, and\n   * if they aren't, `useExternalRouteRef` will return `undefined`.\n   */\n  optional?: TOptional;\n}): ExternalRouteRef<\n  keyof TParams extends never\n    ? undefined\n    : string extends TParamKeys\n    ? TParams\n    : { [param in TParamKeys]: string },\n  TOptional\n> {\n  return new ExternalRouteRefImpl(\n    Boolean(options?.optional),\n    options?.params as string[] | undefined,\n    describeParentCallSite(),\n  ) as ExternalRouteRef<any, any>;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { routeRefType } from './types';\nimport {\n  RouteRef as LegacyRouteRef,\n  SubRouteRef as LegacySubRouteRef,\n  ExternalRouteRef as LegacyExternalRouteRef,\n  AnyRouteRefParams,\n} from '@backstage/core-plugin-api';\n\n// Relative imports to avoid dependency, at least for now\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n  createRouteRef,\n  createSubRouteRef,\n  createExternalRouteRef,\n} from '../../../frontend-plugin-api/src/routing';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalRouteRef } from '../../../frontend-plugin-api/src/routing/RouteRef';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalSubRouteRef } from '../../../frontend-plugin-api/src/routing/SubRouteRef';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExternalRouteRef } from '../../../frontend-plugin-api/src/routing/ExternalRouteRef';\n\n// TODO(Rugvip): Once this is moved to a compat package these aliases can be removed and imported from frontend- instead\n\n/** @ignore */\ntype NewRouteRef<TParams extends AnyRouteRefParams = AnyRouteRefParams> =\n  RouteRef<TParams>;\n\n/** @ignore */\ntype NewSubRouteRef<TParams extends AnyRouteRefParams = AnyRouteRefParams> =\n  SubRouteRef<TParams>;\n\n/** @ignore */\ntype NewExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n  TOptional extends boolean = boolean,\n> = ExternalRouteRef<TParams, TOptional>;\n\n/**\n * A temporary helper to convert a legacy route ref to the new system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: LegacyRouteRef<TParams>,\n): NewRouteRef<TParams>;\n\n/**\n * A temporary helper to convert a legacy sub route ref to the new system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createSubRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<TParams extends AnyRouteRefParams>(\n  ref: LegacySubRouteRef<TParams>,\n): NewSubRouteRef<TParams>;\n\n/**\n * A temporary helper to convert a legacy external route ref to the new system.\n *\n * @public\n * @remarks\n *\n * In the future the legacy createExternalRouteRef will instead create refs compatible with both systems.\n */\nexport function convertLegacyRouteRef<\n  TParams extends AnyRouteRefParams,\n  TOptional extends boolean,\n>(\n  ref: LegacyExternalRouteRef<TParams, TOptional>,\n): NewExternalRouteRef<TParams, TOptional>;\n\nexport function convertLegacyRouteRef(\n  ref: LegacyRouteRef | LegacySubRouteRef | LegacyExternalRouteRef,\n): NewRouteRef | NewSubRouteRef | NewExternalRouteRef {\n  // Ref has already been converted\n  if ('$$type' in ref) {\n    return ref as unknown as NewRouteRef | NewSubRouteRef | NewExternalRouteRef;\n  }\n\n  const type = (ref as unknown as { [routeRefType]: unknown })[routeRefType];\n\n  if (type === 'absolute') {\n    const legacyRef = ref as LegacyRouteRef;\n    const newRef = toInternalRouteRef(\n      createRouteRef<{ [key in string]: string }>({\n        params: legacyRef.params as string[],\n      }),\n    );\n    return Object.assign(legacyRef, {\n      $$type: '@backstage/RouteRef' as const,\n      version: 'v1',\n      T: newRef.T,\n      getParams() {\n        return newRef.getParams();\n      },\n      getDescription() {\n        return newRef.getDescription();\n      },\n      setId(id: string) {\n        newRef.setId(id);\n      },\n      toString() {\n        return newRef.toString();\n      },\n    });\n  }\n  if (type === 'sub') {\n    const legacyRef = ref as LegacySubRouteRef;\n    const newRef = toInternalSubRouteRef(\n      createSubRouteRef({\n        path: legacyRef.path,\n        parent: convertLegacyRouteRef(legacyRef.parent),\n      }),\n    );\n    return Object.assign(legacyRef, {\n      $$type: '@backstage/SubRouteRef' as const,\n      version: 'v1',\n      T: newRef.T,\n      getParams() {\n        return newRef.getParams();\n      },\n      getParent() {\n        return newRef.getParent();\n      },\n      getDescription() {\n        return newRef.getDescription();\n      },\n      toString() {\n        return newRef.toString();\n      },\n    });\n  }\n  if (type === 'external') {\n    const legacyRef = ref as LegacyExternalRouteRef;\n    const newRef = toInternalExternalRouteRef(\n      createExternalRouteRef<{ [key in string]: string }>({\n        params: legacyRef.params as string[],\n        optional: legacyRef.optional,\n      }),\n    );\n    return Object.assign(legacyRef, {\n      $$type: '@backstage/ExternalRouteRef' as const,\n      version: 'v1',\n      T: newRef.T,\n      optional: newRef.optional,\n      getParams() {\n        return newRef.getParams();\n      },\n      getDescription() {\n        return newRef.getDescription();\n      },\n      setId(id: string) {\n        newRef.setId(id);\n      },\n      toString() {\n        return newRef.toString();\n      },\n    });\n  }\n\n  throw new Error(`Failed to convert legacy route ref, unknown type '${type}'`);\n}\n"],"names":["_id","__privateAdd","__publicField","__privateSet","__privateGet","_params"],"mappings":"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"}