{"version":3,"file":"index-e56d86b2.esm.js","sources":["../../src/components/AnsibleAWXComponent/AnsibleAWXComponent.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Table, TableColumn, Progress, ResponseErrorPanel } from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { useApi, configApiRef } from '@backstage/core-plugin-api';\n\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport RocketLaunchIcon from '@mui/icons-material/RocketLaunch';\n\nconst useStyles = makeStyles({\n    avatar: {\n        height: 32,\n        width: 32,\n        borderRadius: '50%',\n    },\n});\n\ntype JobTemplate = {\n    created: string;\n    description: string;\n    id: number;\n    last_job_failed: boolean;\n    last_job_success: boolean;\n    last_job_run: string;\n    modified: string;\n    name: string;\n    playbook: string;\n    status: string;\n    url: string;\n    summary_fields: any;\n};\n\ntype DenseTableProps = {\n    templates: JobTemplate[];\n    onRunJob: (id: string) => void;\n};\n\n\nexport const DenseTable = ({ templates, onRunJob }: DenseTableProps) => {\n\n    const classes = useStyles();\n    const { entity } = useEntity();\n\n    const annotationKey = 'ansible/template-labels';\n    const annotationValue = entity.metadata.annotations?.[annotationKey];\n\n    if (!annotationValue) {\n        // Handle the case where the annotation doesn't exist\n        return <div>No specific annotation found for this entity.</div>;\n    }\n\n    const selectedLabelsArray = annotationValue.split(',').map(label => label.trim());\n\n\n    const columns: TableColumn[] = [\n        { title: 'ID', field: 'id' },\n        { title: 'Name', field: 'name' },\n        { title: 'Description', field: 'description' },\n        { title: 'Last Run', field: 'lastRun' },\n        { title: 'Status', field: 'status' },\n        { title: 'Label', field: 'label' },\n        { title: '', field: 'run' },\n\n    ];\n\n    const data = templates\n        .filter(template => {\n            const labelsArray = template[\"summary_fields\"][\"labels\"][\"results\"];\n            // Check if the labelsArray includes a label that matches selectedLabel\n            return labelsArray.some(label => selectedLabelsArray.includes(label.name));\n        })\n        .map(template => {\n            const labelsArray = template[\"summary_fields\"][\"labels\"][\"results\"];\n            const labelsString = labelsArray.map(label => label.name).join(', ');\n            let statusComponent;\n\n            const date = new Date(template.last_job_run);\n\n            const humanReadableDate = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n\n            switch (template.status) {\n                case 'successful':\n                    statusComponent = <CheckCircleOutlineIcon style={{ fontSize: 24 }} />;\n                    break;\n                case 'error':\n                    statusComponent = <ErrorOutlineIcon style={{ fontSize: 24 }} />;\n                    break;\n                case 'running':\n                    statusComponent = <CircularProgress size={24} />;\n                    break;\n                default:\n                    statusComponent = <div>{template.status}</div>;\n            }\n            return {\n                id: template.id,\n                description: template.description,\n                lastRun: humanReadableDate,\n                name: template.name,\n                status: statusComponent,\n                label: labelsString,\n                run: (\n                    <RocketLaunchIcon onClick={() => onRunJob(String(template.id))} />\n                )\n                // url: (\n                //     <a\n                //         href={`http://devops.ascentapi.com/#/templates${template.url.replace('/api/v2/job_templates', '/job_template')}details`}\n                //         target=\"_blank\"\n                //         rel=\"noopener noreferrer\">\n                //         Open\n                //     </a>\n                // )\n            };\n        });\n\n    return (\n        <Table\n            title=\"Ansible Job Templates\"\n            options={{ search: false, paging: false }}\n            columns={columns}\n            data={data}\n        />\n    );\n};\n\nexport const EntityAWXContent = () => {\n    const config = useApi(configApiRef);\n    const backendUrl = config.getString('backend.baseUrl');\n    const [templates, setTemplates] = useState<JobTemplate[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<Error | null>(null);\n    const [intervals, setIntervals] = useState({});\n    const [runningJobs, setRunningJobs] = useState({});\n\n\n    const templatesRef = useRef(templates);\n\n    useEffect(() => {\n        templatesRef.current = templates;\n    }, [templates]);\n\n    async function fetchTemplates() {\n        const response = await fetch(`${backendUrl}/api/proxy/ansible-awx/api/v2/organizations/2/job_templates/`);\n        const data = await response.json();\n        console.log(\"API Response: \", data);\n\n        // Assuming data.results contains the array of job templates\n        setTemplates(data.results || []);\n    }\n\n    const handleRunJob = (id: string) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n        };\n        console.log(\"Start job\", id);\n\n        fetch(`${backendUrl}/api/proxy/ansible-awx/api/v2/job_templates/` + id + '/launch/', requestOptions)\n            .then(() => {\n                fetchTemplates();\n                setRunningJobs(prevJobs => ({ ...prevJobs, [id]: true }));\n            })\n            .catch(error => console.error(\"Error launching job\", error));\n    };\n\n    // poll for running jobs\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            Object.keys(runningJobs).forEach(async (jobId) => {\n                if (!runningJobs[jobId]) return; // Skip if the job is no longer running\n\n                await fetchTemplates();\n                const updatedJobTemplate = templatesRef.current.find(template => template.id.toString() === jobId);\n\n                if (updatedJobTemplate && updatedJobTemplate.status === \"successful\") {\n                    console.log(\"End Loop\")\n                    setRunningJobs(prevJobs => {\n                        const updatedJobs = { ...prevJobs };\n                        delete updatedJobs[jobId];\n                        return updatedJobs;\n                    });\n                }\n            });\n        }, 500);\n\n        return () => clearInterval(intervalId);\n    }, [runningJobs]);\n\n\n    // const handleRunJob = (id: string) => {\n    //     const requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //     };\n    //     console.log(\"Start job\", id);\n\n    //     fetch('http://devops.ascentapi.com:7007/api/proxy/ansible-awx/api/v2/job_templates/' + id + '/launch/', requestOptions)\n    //         .then(() => {\n    //             const intervalId = setInterval(() => {\n    //                 fetchTemplates().then(() => {\n    //                     const updatedJobTemplate = templatesRef.current.find(template => template.id.toString() === id);\n\n    //                     if (updatedJobTemplate && updatedJobTemplate.status === \"successful\") {\n    //                         console.log(\"Stop Interval\", updatedJobTemplate);\n    //                         clearInterval(intervals[id]);\n    //                         setIntervals(prevIntervals => {\n    //                             const newIntervals = { ...prevIntervals };\n    //                             delete newIntervals[id];\n    //                             return newIntervals;\n    //                         });\n    //                     }\n    //                 });\n    //             }, 500); // Runs every 500 ms (0.5 seconds)\n\n    //             setIntervals(prevIntervals => ({ ...prevIntervals, [id]: intervalId }));\n    //         })\n    //         .catch(error => console.error(\"Error launching job\", error));\n    // };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                await fetchTemplates();\n                setLoading(false);\n            } catch (err) {\n                console.error('Fetching error:', err);\n                setError(err as Error);\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    // useEffect(() => {\n    //     return () => {\n    //         Object.values(intervals).forEach(clearInterval);\n    //     };\n    // }, [intervals]);\n\n    if (loading) {\n        return <Progress />;\n    } else if (error) {\n        return <ResponseErrorPanel error={error} />;\n    }\n\n    return <DenseTable templates={templates} onRunJob={handleRunJob} />;\n};\n"],"names":["error"],"mappings":"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"}